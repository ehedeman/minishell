TO DO
[] pipes with redirection (basic and multiple pipes work)
[] norm
[] commands called through execve make the programm loop if failed (eg when the "file not found" message pops up)
[] running ./minishell or bash inside minishell is not working anymore (or maybe is my laptop, test in school),
	for example, if you run bash, all the commands are not being printed to stdout, but to the .output_blabla file
	can't run ./minishell, it is also being run on the .output file
[] cd -> /bin/cat: .output_the_first_cuz_what_the_fuck: No such file or directory
[] idk where TEST-1 is comming from, but sth definately made the exit_status not be updated correctly anymore in case of file or command not found.



--------------------------------------------------------------------------------------------------------------------------------
TESTS
Redirection
[] ls > file1 (well, in bash it creates the file first if not existent, than runs ls -la, so the file name is also on the list inside the file)
[] <file1 cat
[] <file ls
[] >file ls -la
[] ls >file1.txt -l (i think this would be another level of parsing tbh)
[ok] cat <file1 >file2
[ok] cat <<EOF >file
[ok] echo a '>>'file>file2

Pipes
[ok] echo hello | cat -e
[ok] echo hello | wc -w | cat -e
[ok] ls -la | grep ".c" | wc -l

Redirection with pipes
[ok] echo hello > out | wc -w
[] ls -la > file1 | ls -la > file2 (combination with pipe is working, just has the same issue that ls is run before creating file, like first test in redirection list)
[] >file ls -la | >file1 ls -la
[] < file1 cat | wc -c > file2
[ok] echo a >file | cat <file
[] >file>file1>file2 ls -l | cat <file2
[okish] ls > | wc ...works like in bash (but is not the same as ls>|wc, which doesnt, wtf bash?)
[] >>file echo '$USER' | cat < info.txt (it creates the file and runs the cat on info.txt, but $USER got lost)
[] >>file echo '$USER' | cat <file (if file existed before, just cat whatever was there before, but it its not overwritten with $USER)

--------------------------------------------------------------------------------------------------------------------------------

IN PROGRESS
[smatschu]
[]echo $? should print exit value
	[x] bash commands
	[x] ./whatever
	[x] exit 123 or any number higher than 255 (you can enter bash or ./minishell and exit, than echo $? to see if it gets the right value)
	[x] command or file than does not exist (127)
	[x] file without permission (126)
	[] syntax errors, missing keywords or commands -> exit_status 2
		[x] for example: exit asdasd -> exit_status 2 (exit 234 asd -> 1)
		[] others, in parsing maybe? -> have to change main_error and wherever it is being called to take mini and use mini->exit_status
	[] script terminated by ctrl+c -> exit_status 130
	[x] ctrl D exit with 0, not 1


[ehedeman]
[]Parsing:
	[x] check operator and lack of spaces in general

IDEA:
	pipes and redirections established at the beginning: a file descriptor array which gets sorted through 1 by 1 (maybe pipes and redirections seperately)


--------------------------------------------------------------------------------------------------------------------------------
OPTIONAL(?)
[not requested on subject, so no]history: with one value as argument to change ammount of lines from history to print
[not requested on subject, so no]history: -c to clear the history
[]bonus only?
	echo "'$USER'" should print 'USER_VALUE'
	echo '"$USER"' should print "$USER"

--------------------------------------------------------------------------------------------------------------------------------
DONE
[x]tab is running ls: if you press Tab twice without typing anything or 
just after typing a part of a filename or directory name, 
readline will list all files and directories in the current directory.
[x]p is running pwd, c cd, e echo and so on.
[x]echo $PATH${NAME}$WTVR
[x]expr $? + $?
[x] export FOO=test, than export FOO, should not update FOO.
[x]SHLVL
[x]history command (capacity is set to 5 for easy visualization, can change to 2000 later like bash)
[x] export FOO=test, than export FOO, should not update FOO.
[x]ctrl-C in a prompt after you wrote some stuff should show a new line with a new prompt
	and command + CTRL+c + ENTER should not execute command (handler?)
[x]if you run ctrl+c and no enter, ctrl+d doesnt work
[x]cat < file leaks ------------ no it doesnt -----------
[x]from some eval sheet: "ctrl-\ in a prompt after you wrote some stuff should quit minishell?" Seems to be working like in bash, so wtvr.
[x] norm arg_expansion
[x]on bash: export HISTCONTROL=ignoredups , so history in bash ignores consecutive dup cmds
[x] what is this exactly?
	mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
-> mode is the right that the file gets when created (RUSR = Read User etc.)
[x] whats this flag -fno-omit-frame-pointer for?
->debug flag for fsanatize, used last in so_long. think u can get more info on the leaks etc with that flag
but not sure
[x]exit function can take one value as argument
	run bash
	exit 123
	echo $? will return 123
	on minishell, exit 123
	on bash, echo $? should display 123
[x]input check for pipe without content
[x]basic and multiple pipes
[x]echo $?"$?"$? is working, but echo $? "$?" $? not, also asd "asd" asd not
[x]arg expansion needs to recognize '$ within words when lowercase, uppercase no?
	seems like it's a bash version thing? or check again in school.
	my version: GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu)
[x] $USERblabal should not print anything, but...
[x] "$USER"blabla should expand user, but I can't expand USER if i dont have the "" anymore.
[x] echo "hello" '|' cat -e should print hello | cat -e -> operstors with siongle quotes in general
[x]echo '$USER'$? is saving '$USER'$? as a whole arg. Fix parsing or should rewrite echo again?
[x]input redirection without executing the command immideadly -> redirect input then run the command loop, reset input at end
[x] wc -l > info.txt < hello ;  should redirect the output of wc -l > info.txt to hello (operators might be the other way around)
[x] << end ; input redirecion until but without command (leaks)
[x] "echo hello |" now asks to complete input
[x]replace_env_vars has invalid read size (try make leaks (from MAKEFILE), then type any command it'll show the exact line)
[x] aren't exec_com_fork and exec_file_fork the same? (execute_file_utils.c)
->nope, one is for files only (eg. ./a.out) the other is strictly for commands (difference
is the part where the "./" gets strjoined to the rest, but because of norm  and for simplicity
i made it into two)
[x]norm arg_expansion
