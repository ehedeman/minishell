how parsing works step-by-step:

1. pasing() returns a linklist (similar to the one in libft)

it takes the input, cllocates a node (consisting of an argument list argv, the number of arguments argc,
the operator for those arguments saved and the next node in line)

so a list would perhabs look like this:

Node 1:

argv[0] = pwd
argc = 1
operator = PIPE
next = (pointer to) Node 2

Node 2:

argv[0] = cat
argv[1] = -e
argc = 2
operator = NONE
next = NULL

there might be errors (lots of them probably) but the basic idea works.

things to know:

-quotation marks will be removed before putting it into the list
-operator signs (<>|) can be typed both "pwd>out" and "pwd > out".
-operator signs will not get listed in argv (they get skipped and instead
the operator value is set)

-currently working on checking the input for invalid stuff (such as single quotation marks because the parser 
cannot and is not supposed to handle that)

-parsing is very much not norminette conforming but i dont think its smart to clean everything up
before making sure everything works properly.

cd is also working and tailored to the parsing method. if you type cd then it gets you to home/user.
if you type cd Directory (without the /), then it gets itself the path youre currently on and adds the new
Directory. Then it heads there (worked when i tried it).
if you type cd /whatever_path, then it just gets you there. pwd works somewhat but i havent changed it to work with
redirection and such, since redirections etc arent really implemented yet. (it works to test cd but thats it.)

NEW STUFF: (01.06.24)

-inplemented rm -f for fun and cuz its practical
-fixed some parsing errors (you can now have as many redirections as you want)
-added echo

working on: getting redirections correct if its multiple after another (e.g "echo hello > out > out_1",
in example the "hello" would land in the last file listed in the command)


For parsing redirect: Operator is always for the next. if theres a redirect the thing on the right has
to be the place its going to. therefor you can just say if your on argv[argc] and the operator is redirect
then skip the next node and just create the file with the name of the file (if nessecary, otherwise just open,
check if its got another redirect and if not write. otherwise close, open next etc.)

->works now

smatschu>
$?: working on it
[DONE] delete envp_dup and work only with linked list


ehedeman>
redirect_input_until
"> fkhekfh echo hello" thing -> done
use linklist for envp in exec_command/file ->done

(also exec_command is now split into execute_file.c and execute_file_utils.c, 
both are norminette friendly except for the comments still left in it)
use linklist for envp in exec_command/file


TO DO:
[	]test only spaces is giving segv
[	]tab is running ls ?
[	]"echo test" should give command not found, instead is runnign echo
[	]$PATH: '$PATH' should not work, should only print $PATH. $PATH and "$PATH" are ok.
should we fix in the parsing? subject says:
• Handle ’ (single quote) which should prevent the shell from interpreting the meta-
characters in the quoted sequence.
• Handle " (double quote) which should prevent the shell from interpreting the meta-
characters in the quoted sequence except for $ (dollar sign).
[	]$PATH $? is printing, but $PATH$? not yet
[	]for $?, at every possible exit, update exit value in mini struct
